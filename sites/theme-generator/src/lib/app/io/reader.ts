import { colorShades } from "../constants";
import type { ThemetteTheme } from "../types";

/**
 * Converts a css string to a `ThemetteTheme` if possible, throws an error if it fails.
 *
 * Right now the `readTheme` fn expects contrasts to be present in the css string, this
 * might be limiting for users who want to import files not generated by us but follows the appropriate format.
 */
export function readTheme(css: string): ThemetteTheme {
  const theme: any = {};

  /**
   * matches set, shade, and value:
   * - `(?<!(?:-contrast))` ignores contrast variables
   * - `(?<!(?:-\d+-\d+))` ignores generated pairing variables
   */
  const colorRegex = /^--color-(.+?)(?<!(?:-contrast))-(\d+)(?<!(?:-\d+-\d+)):\s*([^;]+);/;
  const contrastRegex = /^--color-(.+?)-contrast-(\d+):\s*([^;]+);/;

  const lines = css
    .split("\n")
    .map((line) => line.trim())
    .filter((line) => line.startsWith("--color-"));

  const colors = lines
    .map((line) => line.match(colorRegex))
    .filter((matches) => matches !== null)
    .filter((matches) => matches.length === 4 && colorShades.includes(matches[2] as any))
    .map(([, set, shade, value]) => ({ set, shade, value }));

  const contrasts = lines
    .map((line) => line.match(contrastRegex))
    .filter((matches) => matches !== null)
    .filter((matches) => matches.length === 4 && colorShades.includes(matches[2] as any))
    .map(([, set, shade, value]) => ({ set, shade, value }));

  const sets = [...new Set([...colors.map(({ set }) => set), ...contrasts.map(({ set }) => set)])];

  sets.forEach((set) => (theme[set] = { contrasts: {} }));
  colors.forEach((color) => (theme[color.set][color.shade] = color.value));
  contrasts.forEach((contrast) => (theme[contrast.set]["contrasts"][contrast.shade] = contrast.value));

  if (!isValidTheme(theme)) throw Error("Theme colors did not follow the correct format!");

  return theme;
}

/**
 * Checks if the given object has shades for color sets and their contrasts. Note that this does not
 * make sure if `readTheme()` actually read the theme appropriately, but just checks if the given object can
 * pass as a `ThemetteTheme`.
 */
function isValidTheme(theme: any): theme is ThemetteTheme {
  const sets = Object.keys(theme);
  const shadeSet = new Set(colorShades);
  const areSetsEqual = (a: Set<string>, b: Set<string>) => a.size === b.size && [...a].every((value) => b.has(value));

  for (let set of sets) {
    let keys = Object.keys(theme[set]).filter((key) => key !== "contrasts");
    let contrastKeys = theme[set]["contrasts"] ? Object.keys(theme[set]["contrasts"]) : undefined;

    if (!areSetsEqual(new Set(keys), shadeSet)) return false;
    if (!contrastKeys || !areSetsEqual(new Set(contrastKeys), shadeSet)) return false;
  }

  return true;
}
